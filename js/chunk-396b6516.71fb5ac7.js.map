{"version":3,"sources":["webpack:///./src/assets/images/header-bg-2.jpg","webpack:///./src/components/ar-contact-form.vue?cf3f","webpack:///./node_modules/vue-demi/lib/index.esm.js","webpack:///./node_modules/@vuelidate/core/dist/index.esm.js","webpack:///./node_modules/@vuelidate/validators/dist/index.esm.js","webpack:///./src/components/ar-contact-form.vue","webpack:///./src/components/ar-contact-form.vue?a293","webpack:///./src/views/Contact.vue","webpack:///./src/components/ar-page-header.vue","webpack:///./src/components/ar-page-header.vue?7312"],"names":["module","exports","isVue3","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","Array","isArray","_arrayLikeToArray","iter","from","o","minLen","n","toString","call","slice","name","test","len","arr2","unwrapObj","ignoreKeys","arguments","undefined","keys","reduce","k","includes","isFunction","val","isProxy","value","_call","body","then","direct","result","Promise","resolve","e","reject","ROOT_PATH","_async","f","args","apply","this","sortValidations","validationsRaw","validations","validationKeys","rules","nestedValidators","config","forEach","v","$validator","startsWith","callRule","rule","normalizeValidatorResponse","$valid","createAsyncResult","model","$pending","$dirty","_ref","$response","$lazy","watchTargets","$invalid","$pendingCounter","$unwatch","concat","ruleResult","err","data","error","immediate","deep","createSyncResult","_ref2","createValidatorResult","validatorName","propertyKey","propertyPath","$params","$async","_createAsyncResult","$watchTargets","_createSyncResult","message","$message","$model","$propertyPath","$property","createValidationResults","resultsCache","path","externalResults","ruleKeys","cachedResult","get","$partial","$path","$touch","$reset","ruleKey","$externalResults","map","stringError","index","$uid","some","$error","$silentErrors","filter","res","$errors","set","collectNestedValidationResults","nestedState","nestedExternalResults","nestedValidationKeys","results","nestedKey","setValidations","state","parentKey","globalConfig","createMetaFields","nestedResults","childResults","allResults","allRes","values","every","r","modelErrors","nestedErrors","errors","$anyDirty","nr","_ref3","_ref3$globalConfig","_sortValidations","mergedConfig","assign","s","cachedExternalResults","_createMetaFields","$autoDirty","autoDirtyPath","cachedAutoDirty","flush","$validate","unwatch","$getResultsForChild","$clearExternalResults","ResultsStorage","storage","Map","storedRules","storedRulesKeys","newRulesKeys","hasAllValidators","paramKey","storedRuleResultPair","isValidCache","checkRulesValidity","VuelidateInjectChildResults","VuelidateRemoveChildResults","CollectFlag","COLLECT_ALL","COLLECT_NONE","nestedValidations","$scope","childResultsRaw","childResultsKeys","injectChildResultsIntoParent","$registerAs","childScope","$stopPropagation","push","removeChildResultsFromParent","childKey","sendValidationResultsToParent","removeValidationResultsFromParent","useVuelidate","_globalConfig","_globalConfig$$scope","componentOptions","type","proxy","$options","uid","_uid","validationResults","ComputedProxyFactory","Proxy","prop","receiver","vuelidateExternalResults","validationsConfig","validationsWatchTarget","newValidationRules","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_arr","_n","_d","_e","_s","_i","next","done","isObject","normalizeValidatorObject","validator","unwrapValidatorResponse","unwrapNormalizedValidator","withParams","Error","validatorObj","withMessage","withAsync","validators","collection","_this","_len","others","_key","previous","object","collectionEntryResult","entries","all","innerValidators","propertyResult","_ref4","currentValidator","validatorFunction","$data","_ref5","context","a","b","Date","isNaN","getTime","_","String","regex","expr","emailRegex","email","email$1","required","trim","required$1","urlRegex","asunto","phone","termsAccepted","accepted","v$","sendInfo","preventDefault","resp","alert","JSON","stringify","__scopeId","router","currentRoute"],"mappings":"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","file":"js/chunk-396b6516.71fb5ac7.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/header-bg-2.3583843e.jpg\";","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./ar-contact-form.vue?vue&type=style&index=0&id=33c0052a&scoped=true&lang=css\"","import * as Vue from 'vue'\n\nvar isVue2 = false\nvar isVue3 = true\nvar Vue2 = undefined\n\nfunction install() {}\n\nexport function set(target, key, val) {\n  if (Array.isArray(target)) {\n    target.length = Math.max(target.length, key)\n    target.splice(key, 1, val)\n    return val\n  }\n  target[key] = val\n  return val\n}\n\nexport function del(target, key) {\n  if (Array.isArray(target)) {\n    target.splice(key, 1)\n    return\n  }\n  delete target[key]\n}\n\nexport * from 'vue'\nexport {\n  Vue,\n  Vue2,\n  isVue2,\n  isVue3,\n  install,\n}\n","import { isReactive, isReadonly, unref, reactive, computed, isRef, watch, ref, nextTick, getCurrentInstance, isVue3, onBeforeMount, onBeforeUnmount, inject, provide } from 'vue-demi';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction unwrapObj(obj) {\n  var ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce(function (o, k) {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\nvar ROOT_PATH = '__root';\n/**\n * @typedef {import('vue-demi').ComponentPublicInstance} VueInstance\n */\n\n/**\n * @typedef {import('vue-demi').ComputedRef} ComputedRef\n */\n\n/**\n * @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle\n */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * Sorts the validators for a state tree branch\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n/**\n * Calls a validation rule by unwrapping it's value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\n\nfunction sortValidations() {\n  var validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var validations = unref(validationsRaw);\n  var validationKeys = Object.keys(validations);\n  var rules = {};\n  var nestedValidators = {};\n  var config = {};\n  validationKeys.forEach(function (key) {\n    var v = validations[key];\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesn’t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules: rules,\n    nestedValidators: nestedValidators,\n    config: config\n  };\n}\n\nfunction callRule(rule, value, instance) {\n  var v = unref(value);\n  return rule.call(instance, v, instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  var $lazy = _ref.$lazy;\n  var watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  var $invalid = ref(!!$dirty.value);\n  var $pendingCounter = ref(0);\n  $pending.value = false;\n  var $unwatch = watch([model, $dirty].concat(watchTargets), function () {\n    if ($lazy && !$dirty.value) return false;\n    var ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value;\n    $invalid.value = true;\n    Promise.resolve(ruleResult).then(function (data) {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    })[\"catch\"](function (error) {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: _typeof(model) === 'object'\n  });\n  return {\n    $invalid: $invalid,\n    $unwatch: $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance) {\n  var $lazy = _ref2.$lazy;\n\n  var $unwatch = function $unwatch() {\n    return {};\n  };\n\n  var $invalid = computed(function () {\n    if ($lazy && !$dirty.value) return false;\n\n    try {\n      var result = callRule(rule, model, instance);\n      $response.value = result;\n      return normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return true;\n  });\n  return {\n    $unwatch: $unwatch,\n    $invalid: $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath) {\n  var $pending = ref(false);\n  var $params = rule.$params || {};\n  var $response = ref(null);\n  var $invalid;\n  var $unwatch;\n\n  if (rule.$async) {\n    var _createAsyncResult = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets);\n\n    $invalid = _createAsyncResult.$invalid;\n    $unwatch = _createAsyncResult.$unwatch;\n  } else {\n    var _createSyncResult = createSyncResult(rule.$validator, model, $dirty, config, $response, instance);\n\n    $invalid = _createSyncResult.$invalid;\n    $unwatch = _createSyncResult.$unwatch;\n  }\n\n  var message = rule.$message;\n  var $message = isFunction(message) ? computed(function () {\n    return message(unwrapObj({\n      $pending: $pending,\n      $invalid: $invalid,\n      $params: unwrapObj($params),\n      // $params can hold refs, so we unwrap them for easy access\n      $model: model,\n      $response: $response,\n      $validator: validatorName,\n      $propertyPath: propertyPath,\n      $property: propertyKey\n    }));\n  }) : message || '';\n  return {\n    $message: $message,\n    $params: $params,\n    $pending: $pending,\n    $invalid: $invalid,\n    $response: $response,\n    $unwatch: $unwatch\n  };\n}\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @return {ValidationResult | {}}\n */\n\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults) {\n  // collect the property keys\n  var ruleKeys = Object.keys(rules);\n  var cachedResult = resultsCache.get(path, rules);\n  var $dirty = ref(false);\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  var result = {\n    // restore $dirty from cache\n    $dirty: $dirty,\n    $path: path,\n    $touch: function $touch() {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: function $reset() {\n      if ($dirty.value) $dirty.value = false;\n    }\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(function (ruleKey) {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path);\n  });\n  result.$externalResults = computed(function () {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map(function (stringError, index) {\n      return {\n        $propertyPath: path,\n        $property: key,\n        $validator: '$externalResults',\n        $uid: \"\".concat(path, \"-\").concat(index),\n        $message: stringError,\n        $params: {},\n        $response: null,\n        $pending: false\n      };\n    });\n  });\n  result.$invalid = computed(function () {\n    return !!result.$externalResults.value.length || ruleKeys.some(function (ruleKey) {\n      return unref(result[ruleKey].$invalid);\n    });\n  });\n  result.$pending = computed(function () {\n    return ruleKeys.some(function (ruleKey) {\n      return unref(result[ruleKey].$pending);\n    });\n  });\n  result.$error = computed(function () {\n    return result.$invalid.value && result.$dirty.value;\n  });\n  result.$silentErrors = computed(function () {\n    return ruleKeys.filter(function (ruleKey) {\n      return unref(result[ruleKey].$invalid);\n    }).map(function (ruleKey) {\n      var res = result[ruleKey];\n      return reactive({\n        $propertyPath: path,\n        $property: key,\n        $validator: ruleKey,\n        $uid: \"\".concat(path, \"-\").concat(ruleKey),\n        $message: res.$message,\n        $params: res.$params,\n        $response: res.$response,\n        $pending: res.$pending\n      });\n    }).concat(result.$externalResults.value);\n  });\n  result.$errors = computed(function () {\n    return result.$dirty.value ? result.$silentErrors.value : [];\n  });\n\n  result.$unwatch = function () {\n    return ruleKeys.forEach(function (ruleKey) {\n      result[ruleKey].$unwatch();\n    });\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {{}}\n */\n\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  var nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce(function (results, nestedKey) {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache: resultsCache,\n      globalConfig: config,\n      instance: instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, ValidationResult>[]} nestedResults\n * @param {Object.<string, ValidationResult>[]} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  var allResults = computed(function () {\n    return [nestedResults, childResults].filter(function (res) {\n      return res;\n    }).reduce(function (allRes, res) {\n      return allRes.concat(Object.values(unref(res)));\n    }, []);\n  }); // returns `$dirty` as true, if all children are dirty\n\n  var $dirty = computed({\n    get: function get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(function (r) {\n        return r.$dirty;\n      }) : false);\n    },\n    set: function set(v) {\n      results.$dirty.value = v;\n    }\n  });\n  var $silentErrors = computed(function () {\n    // current state level errors, fallback to empty array if root\n    var modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    var nestedErrors = allResults.value.filter(function (result) {\n      return (unref(result).$silentErrors || []).length;\n    }).reduce(function (errors, result) {\n      return errors.concat.apply(errors, _toConsumableArray(result.$silentErrors));\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  var $errors = computed(function () {\n    // current state level errors, fallback to empty array if root\n    var modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    var nestedErrors = allResults.value.filter(function (result) {\n      return (unref(result).$errors || []).length;\n    }).reduce(function (errors, result) {\n      return errors.concat.apply(errors, _toConsumableArray(result.$errors));\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  var $invalid = computed(function () {\n    return (// if any of the nested values is invalid\n      allResults.value.some(function (r) {\n        return r.$invalid;\n      }) || // or if the current state is invalid\n      unref(results.$invalid) || // fallback to false if is root\n      false\n    );\n  });\n  var $pending = computed(function () {\n    return (// if any of the nested values is pending\n      allResults.value.some(function (r) {\n        return unref(r.$pending);\n      }) || // if any of the current state validators is pending\n      unref(results.$pending) || // fallback to false if is root\n      false\n    );\n  });\n  var $anyDirty = computed(function () {\n    return allResults.value.some(function (r) {\n      return r.$dirty;\n    }) || allResults.value.some(function (r) {\n      return r.$anyDirty;\n    }) || $dirty.value;\n  });\n  var $error = computed(function () {\n    return $invalid.value && $dirty.value || false;\n  });\n\n  var $touch = function $touch() {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(function (result) {\n      result.$touch();\n    });\n  };\n\n  var $reset = function $reset() {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(function (result) {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n\n  if (allResults.value.length && allResults.value.every(function (nr) {\n    return nr.$dirty;\n  })) $touch();\n  return {\n    $dirty: $dirty,\n    $errors: $errors,\n    $invalid: $invalid,\n    $anyDirty: $anyDirty,\n    $error: $error,\n    $pending: $pending,\n    $touch: $touch,\n    $reset: $reset,\n    $silentErrors: $silentErrors\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {Reactive<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\n\nfunction setValidations(_ref3) {\n  var validations = _ref3.validations,\n      state = _ref3.state,\n      key = _ref3.key,\n      parentKey = _ref3.parentKey,\n      childResults = _ref3.childResults,\n      resultsCache = _ref3.resultsCache,\n      _ref3$globalConfig = _ref3.globalConfig,\n      globalConfig = _ref3$globalConfig === void 0 ? {} : _ref3$globalConfig,\n      instance = _ref3.instance,\n      externalResults = _ref3.externalResults;\n  var path = parentKey ? \"\".concat(parentKey, \".\").concat(key) : key; // Sort out the validation object into:\n  // – rules = validators for current state tree fragment\n  // — nestedValidators = nested state fragments keys that might contain more validators\n  // – config = configuration properties that affect this state fragment\n\n  var _sortValidations = sortValidations(validations),\n      rules = _sortValidations.rules,\n      nestedValidators = _sortValidations.nestedValidators,\n      config = _sortValidations.config;\n\n  var mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  var nestedState = key ? computed(function () {\n    var s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  var cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  var nestedExternalResults = computed(function () {\n    var results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  var results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  var nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults); // Collect and merge this level validation results\n  // with all nested validation results\n\n  var _createMetaFields = createMetaFields(results, nestedResults, childResults),\n      $dirty = _createMetaFields.$dirty,\n      $errors = _createMetaFields.$errors,\n      $invalid = _createMetaFields.$invalid,\n      $anyDirty = _createMetaFields.$anyDirty,\n      $error = _createMetaFields.$error,\n      $pending = _createMetaFields.$pending,\n      $touch = _createMetaFields.$touch,\n      $reset = _createMetaFields.$reset,\n      $silentErrors = _createMetaFields.$silentErrors;\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n\n  var $model = key ? computed({\n    get: function get() {\n      return unref(nestedState);\n    },\n    set: function set(val) {\n      $dirty.value = true;\n      var s = unref(state);\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    var $unwatch = watch(nestedState, function () {\n      var autoDirtyPath = \"_\".concat(path, \"_$watcher_\");\n      var cachedAutoDirty = resultsCache.get(autoDirtyPath, {});\n      if (!$dirty.value) $touch();\n      if (cachedAutoDirty) cachedAutoDirty.$unwatch();\n      resultsCache.set(autoDirtyPath, {}, {\n        $unwatch: $unwatch\n      });\n    }, {\n      flush: 'sync'\n    });\n  }\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n\n\n  function $validate() {\n    return new Promise(_async(function (resolve) {\n      if (!$dirty.value) $touch(); // await the watchers\n\n      return _call(nextTick, function () {\n        // return whether it is valid or not\n        if (!$pending.value) return resolve(!$invalid.value);\n        var unwatch = watch($pending, function () {\n          resolve(!$invalid.value);\n          unwatch();\n        });\n      });\n    }));\n  }\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(function (k) {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model: $model,\n    $dirty: $dirty,\n    $error: $error,\n    $errors: $errors,\n    $invalid: $invalid,\n    $anyDirty: $anyDirty,\n    $pending: $pending,\n    $touch: $touch,\n    $reset: $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors: $silentErrors\n  }, childResults && {\n    $getResultsForChild: $getResultsForChild,\n    $validate: $validate,\n    $clearExternalResults: $clearExternalResults\n  }, nestedResults));\n}\n\nvar ResultsStorage = /*#__PURE__*/function () {\n  function ResultsStorage() {\n    _classCallCheck(this, ResultsStorage);\n\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n\n  _createClass(ResultsStorage, [{\n    key: \"set\",\n    value: function set(path, rules, result) {\n      this.storage.set(path, {\n        rules: rules,\n        result: result\n      });\n    }\n    /**\n     * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n     * @param {String} path\n     * @param {Object<NormalizedValidator>} rules\n     * @param {Object<NormalizedValidator>} storedRules\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"checkRulesValidity\",\n    value: function checkRulesValidity(path, rules, storedRules) {\n      var storedRulesKeys = Object.keys(storedRules);\n      var newRulesKeys = Object.keys(rules);\n      if (newRulesKeys.length !== storedRulesKeys.length) return false;\n      var hasAllValidators = newRulesKeys.every(function (ruleKey) {\n        return storedRulesKeys.includes(ruleKey);\n      });\n      if (!hasAllValidators) return false;\n      return newRulesKeys.every(function (ruleKey) {\n        if (!rules[ruleKey].$params) return true;\n        return Object.keys(rules[ruleKey].$params).every(function (paramKey) {\n          // make sure to unwrap before comparing\n          return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n        });\n      });\n    }\n    /**\n     * Returns the matched result if catche is valid\n     * @param {String} path\n     * @param {Object<NormalizedValidator>} rules\n     * @return {{$partial: boolean, $dirty: Ref<boolean>}|undefined|ValidationResult}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(path, rules) {\n      var storedRuleResultPair = this.storage.get(path);\n      if (!storedRuleResultPair) return undefined;\n      var storedRules = storedRuleResultPair.rules,\n          result = storedRuleResultPair.result;\n      var isValidCache = this.checkRulesValidity(path, rules, storedRules);\n      var $unwatch = result.$unwatch ? result.$unwatch : function () {\n        return {};\n      };\n      if (!isValidCache) return {\n        $dirty: result.$dirty,\n        $partial: true,\n        $unwatch: $unwatch\n      };\n      return result;\n    }\n  }]);\n\n  return ResultsStorage;\n}();\n\nvar VuelidateInjectChildResults = Symbol('vuelidate#injectChiildResults');\nvar VuelidateRemoveChildResults = Symbol('vuelidate#removeChiildResults');\nvar CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function, childResults: ComputedRef<Object>, removeValidationResultsFromParent: function}}\n */\n\nfunction nestedValidations(_ref) {\n  var $scope = _ref.$scope;\n  var childResultsRaw = {};\n  var childResultsKeys = ref([]);\n  var childResults = computed(function () {\n    return childResultsKeys.value.reduce(function (results, key) {\n      results[key] = unref(childResultsRaw[key]);\n      return results;\n    }, {});\n  });\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    var key = _ref2.$registerAs,\n        childScope = _ref2.$scope,\n        $stopPropagation = _ref2.$stopPropagation;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  }\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(function (childKey) {\n      return childKey !== key;\n    }); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // inject the `injectChildResultsIntoParent` method, into the current scope\n\n\n  var sendValidationResultsToParent = inject(VuelidateInjectChildResults, function () {}); // provide to all of it's children the send results to parent function\n\n  provide(VuelidateInjectChildResults, injectChildResultsIntoParent);\n  var removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, function () {}); // provide to all of it's children the remove results  function\n\n  provide(VuelidateRemoveChildResults, removeChildResultsFromParent);\n  return {\n    childResults: childResults,\n    sendValidationResultsToParent: sendValidationResultsToParent,\n    removeValidationResultsFromParent: removeValidationResultsFromParent\n  };\n}\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending it's results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {UnwrapRef<*>}\n */\n\n\nfunction useVuelidate(validations, state) {\n  var globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  var _globalConfig = globalConfig,\n      $registerAs = _globalConfig.$registerAs,\n      _globalConfig$$scope = _globalConfig.$scope,\n      $scope = _globalConfig$$scope === void 0 ? CollectFlag.COLLECT_ALL : _globalConfig$$scope,\n      $stopPropagation = _globalConfig.$stopPropagation,\n      $externalResults = _globalConfig.$externalResults;\n  var instance = getCurrentInstance();\n  var componentOptions = instance ? isVue3 ? instance.type : instance.proxy.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs && instance) {\n    // NOTE:\n    // ._uid // Vue 2.x Composition-API plugin\n    // .uid // Vue 3.0\n    var uid = instance.uid || instance._uid;\n    $registerAs = \"_vuelidate_\".concat(uid);\n  }\n\n  var validationResults = ref({});\n  var resultsCache = new ResultsStorage();\n\n  var _ref3 = instance ? nestedValidations({\n    $scope: $scope\n  }) : {\n    childResults: ref({})\n  },\n      childResults = _ref3.childResults,\n      sendValidationResultsToParent = _ref3.sendValidationResultsToParent,\n      removeValidationResultsFromParent = _ref3.removeValidationResultsFromParent; // Options API\n\n\n  if (!validations && componentOptions.validations) {\n    var rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(function () {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance.proxy; // helper proxy for instance property access. It makes every reference\n      // reactive for the validation function\n\n      function ComputedProxyFactory(target) {\n        return new Proxy(target, {\n          get: function get(target, prop, receiver) {\n            return _typeof(target[prop]) === 'object' ? ComputedProxyFactory(target[prop]) : computed(function () {\n              return target[prop];\n            });\n          }\n        });\n      }\n\n      watch(function () {\n        return isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules;\n      }, function (validations) {\n        validationResults.value = setValidations({\n          validations: validations,\n          state: state,\n          childResults: childResults,\n          resultsCache: resultsCache,\n          globalConfig: globalConfig,\n          instance: instance.proxy,\n          externalResults: instance.proxy.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || {};\n  } else {\n    var validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, function (newValidationRules) {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state: state,\n        childResults: childResults,\n        resultsCache: resultsCache,\n        globalConfig: globalConfig,\n        instance: instance ? instance.proxy : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent(validationResults, {\n      $registerAs: $registerAs,\n      $scope: $scope,\n      $stopPropagation: $stopPropagation\n    }); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(function () {\n      return removeValidationResultsFromParent($registerAs);\n    });\n  } // TODO: Change into reactive + watch\n\n\n  return computed(function () {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\n\nexport default useVuelidate;\nexport { CollectFlag, useVuelidate };\n","import { unref } from 'vue-demi';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isObject(o) {\n  return o !== null && _typeof(o) === 'object' && !Array.isArray(o);\n}\n/**\n * Returns a standard ValidatorObject\n * Wraps a plain function into a ValidatorObject\n * @param {NormalizedValidator|Function} validator\n * @return {NormalizedValidator}\n */\n\nfunction normalizeValidatorObject(validator) {\n  return isFunction(validator.$validator) ? Object.assign({}, validator) : {\n    $validator: validator\n  };\n}\nfunction isPromise(object) {\n  return isObject(object) && isFunction(object.then);\n}\n/**\n * Unwraps a ValidatorResponse object, into a boolean.\n * @param {ValidatorResponse} result\n * @return {boolean}\n */\n\nfunction unwrapValidatorResponse(result) {\n  if (_typeof(result) === 'object') return result.$valid;\n  return result;\n}\n/**\n * Unwraps a `NormalizedValidator` object, returning it's validator function.\n * @param {NormalizedValidator | Function} validator\n * @return {function}\n */\n\nfunction unwrapNormalizedValidator(validator) {\n  return validator.$validator || validator;\n}\n\n/**\n * Allows attaching parameters to a validator\n * @param {Object} $params\n * @param {NormalizedValidator|Function} $validator\n * @return {NormalizedValidator}\n */\n\nfunction withParams($params, $validator) {\n  if (!isObject($params)) throw new Error(\"[@vuelidate/validators]: First parameter to \\\"withParams\\\" should be an object, provided \".concat(_typeof($params)));\n  if (!isObject($validator) && !isFunction($validator)) throw new Error(\"[@vuelidate/validators]: Validator must be a function or object with $validator parameter\");\n  var validatorObj = normalizeValidatorObject($validator);\n  validatorObj.$params = Object.assign({}, validatorObj.$params || {}, $params);\n  return validatorObj;\n}\n\n/**\n * @callback MessageCallback\n * @param {Object} params\n * @return String\n */\n\n/**\n * Attaches a message to a validator\n * @param {MessageCallback | String} $message\n * @param {NormalizedValidator|Function} $validator\n * @return {NormalizedValidator}\n */\n\nfunction withMessage($message, $validator) {\n  if (!isFunction($message) && typeof unref($message) !== 'string') throw new Error(\"[@vuelidate/validators]: First parameter to \\\"withMessage\\\" should be string or a function returning a string, provided \".concat(_typeof($message)));\n  if (!isObject($validator) && !isFunction($validator)) throw new Error(\"[@vuelidate/validators]: Validator must be a function or object with $validator parameter\");\n  var validatorObj = normalizeValidatorObject($validator);\n  validatorObj.$message = $message;\n  return validatorObj;\n}\n\n/**\n * @typedef {function(*): Promise<boolean|ValidatorResponse>} asyncValidator\n */\n\n/**\n * @typedef {Ref<*>[]|function(*): *} watchTargets\n */\n\n/**\n * Wraps validators that returns a Promise.\n * @param {asyncValidator} $validator\n * @param {watchTargets} $watchTargets\n * @return {{$async: boolean, $validator: asyncValidator, $watchTargets: watchTargets}}\n */\n\nfunction withAsync($validator) {\n  var $watchTargets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var validatorObj = normalizeValidatorObject($validator);\n  return Object.assign({}, validatorObj, {\n    $async: true,\n    $watchTargets: $watchTargets\n  });\n}\n\nfunction forEach(validators) {\n  return {\n    $validator: function $validator(collection) {\n      var _this = this;\n\n      for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        others[_key - 1] = arguments[_key];\n      }\n\n      // go over the collection. It can be a ref as well.\n      return unref(collection).reduce(function (previous, object) {\n        // go over each property\n        var collectionEntryResult = Object.entries(object).reduce(function (all, _ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              $model = _ref2[1];\n\n          // get the validators for this property\n          var innerValidators = validators[key]; // go over each validator and run it\n\n          var propertyResult = Object.entries(innerValidators).reduce(function (all, _ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                validatorName = _ref4[0],\n                currentValidator = _ref4[1];\n\n            // extract the validator. Supports simple and extended validators.\n            var validatorFunction = unwrapNormalizedValidator(currentValidator); // Call the validator with correct parameters\n\n            var $response = validatorFunction.call.apply(validatorFunction, [_this, $model].concat(others)); // extract the valid from the result\n\n            var $valid = unwrapValidatorResponse($response); // store the entire response for later\n\n            all.$data[validatorName] = $response; // if not valid, get the $message\n\n            if (!$valid) {\n              var $message = currentValidator.$message || '';\n              var $params = currentValidator.$params || {}; // If $message is a function, we call it with the appropriate parameters\n\n              if (typeof $message === 'function') {\n                $message = $message({\n                  $pending: false,\n                  $invalid: !$valid,\n                  $params: $params,\n                  $model: $model,\n                  $response: $response\n                });\n              } // save the error object\n\n\n              all.$errors.push({\n                $property: key,\n                $message: $message,\n                $params: $params,\n                $response: $response,\n                $model: $model,\n                $pending: false,\n                $validator: validatorName\n              });\n            }\n\n            return {\n              $valid: all.$valid && $valid,\n              $data: all.$data,\n              $errors: all.$errors\n            };\n          }, {\n            $valid: true,\n            $data: {},\n            $errors: []\n          });\n          all.$data[key] = propertyResult.$data;\n          all.$errors[key] = propertyResult.$errors;\n          return {\n            $valid: all.$valid && propertyResult.$valid,\n            $data: all.$data,\n            $errors: all.$errors\n          };\n        }, {\n          $valid: true,\n          $data: {},\n          $errors: {}\n        });\n        return {\n          $valid: previous.$valid && collectionEntryResult.$valid,\n          $data: previous.$data.concat(collectionEntryResult.$data),\n          $errors: previous.$errors.concat(collectionEntryResult.$errors)\n        };\n      }, {\n        $valid: true,\n        $data: [],\n        $errors: []\n      });\n    },\n    // collect all the validation errors into a 2 dimensional array, for each entry in the collection, you have an array of error messages.\n    $message: function $message(_ref5) {\n      var $response = _ref5.$response;\n      return $response ? $response.$errors.map(function (context) {\n        return Object.values(context).map(function (errors) {\n          return errors.map(function (error) {\n            return error.$message;\n          });\n        }).reduce(function (a, b) {\n          return a.concat(b);\n        }, []);\n      }) : [];\n    }\n  };\n}\n\nvar req = function req(value) {\n  value = unref(value);\n  if (Array.isArray(value)) return !!value.length;\n\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  if (value === false) {\n    return true;\n  }\n\n  if (value instanceof Date) {\n    // invalid date won't pass\n    return !isNaN(value.getTime());\n  }\n\n  if (_typeof(value) === 'object') {\n    for (var _ in value) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return !!String(value).length;\n};\n/**\n * Returns the length of an arbitrary value\n * @param {Array|Object|String} value\n * @return {number}\n */\n\nvar len = function len(value) {\n  value = unref(value);\n  if (Array.isArray(value)) return value.length;\n\n  if (_typeof(value) === 'object') {\n    return Object.keys(value).length;\n  }\n\n  return String(value).length;\n};\n/**\n * Regex based validator template\n * @param {RegExp} expr\n * @return {function(*=): boolean}\n */\n\nfunction regex(expr) {\n  return function (value) {\n    value = unref(value);\n    return !req(value) || expr.test(value);\n  };\n}\n\n\n\nvar common = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  withParams: withParams,\n  withMessage: withMessage,\n  withAsync: withAsync,\n  forEach: forEach,\n  req: req,\n  len: len,\n  regex: regex,\n  unwrap: unref,\n  unwrapNormalizedValidator: unwrapNormalizedValidator,\n  unwrapValidatorResponse: unwrapValidatorResponse,\n  normalizeValidatorObject: normalizeValidatorObject\n});\n\nvar alpha = regex(/^[a-zA-Z]*$/);\n\n/**\n * Validate if value is alphabetical string.\n * @type {NormalizedValidator}\n */\n\nvar alpha$1 = {\n  $validator: alpha,\n  $message: 'The value is not alphabetical',\n  $params: {\n    type: 'alpha'\n  }\n};\n\nvar alphaNum = regex(/^[a-zA-Z0-9]*$/);\n\n/**\n * Validate if value is alpha-numeric string.\n * @type {NormalizedValidator}\n */\n\nvar alphaNum$1 = {\n  $validator: alphaNum,\n  $message: 'The value must be alpha-numeric',\n  $params: {\n    type: 'alphaNum'\n  }\n};\n\nvar numeric = regex(/^\\d*(\\.\\d+)?$/);\n\n/**\n * Check whether a value is numeric.\n * @type NormalizedValidator\n */\n\nvar numeric$1 = {\n  $validator: numeric,\n  $message: 'Value must be numeric',\n  $params: {\n    type: 'numeric'\n  }\n};\n\n/**\n * Check if a numeric value is between two values.\n * @param {Ref<Number> | Number} min\n * @param {Ref<Number> | Number} max\n * @return {function(*=): boolean}\n */\n\nfunction between (min, max) {\n  return function (value) {\n    return !req(value) || (!/\\s/.test(value) || value instanceof Date) && +unref(min) <= +value && +unref(max) >= +value;\n  };\n}\n\n/**\n * Checks if a value is between two values.\n * @param {Ref<Number> | Number} min\n * @param {Ref<Number> | Number} max\n * @return {NormalizedValidator}\n */\n\nfunction between$1 (min, max) {\n  return {\n    $validator: between(min, max),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The value must be between \".concat($params.min, \" and \").concat($params.max);\n    },\n    $params: {\n      min: min,\n      max: max,\n      type: 'between'\n    }\n  };\n}\n\nvar emailRegex = /^(?:[A-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9]{2,}(?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/;\nvar email = regex(emailRegex);\n\n/**\n * Validate if value is an email.\n * @type {NormalizedValidator}\n */\n\nvar email$1 = {\n  $validator: email,\n  $message: 'Value is not a valid email address',\n  $params: {\n    type: 'email'\n  }\n};\n\n/**\n * Check if a string is an IP Address\n * @param {String} value\n * @returns {boolean}\n */\n\nfunction ipAddress (value) {\n  if (!req(value)) {\n    return true;\n  }\n\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  var nibbles = value.split('.');\n  return nibbles.length === 4 && nibbles.every(nibbleValid);\n}\n\nvar nibbleValid = function nibbleValid(nibble) {\n  if (nibble.length > 3 || nibble.length === 0) {\n    return false;\n  }\n\n  if (nibble[0] === '0' && nibble !== '0') {\n    return false;\n  }\n\n  if (!nibble.match(/^\\d+$/)) {\n    return false;\n  }\n\n  var numeric = +nibble | 0;\n  return numeric >= 0 && numeric <= 255;\n};\n\n/**\n * Validate if value is an ipAddress string.\n * @type {NormalizedValidator}\n */\n\nvar ipAddress$1 = {\n  $validator: ipAddress,\n  $message: 'The value is not a valid IP address',\n  $params: {\n    type: 'ipAddress'\n  }\n};\n\n/**\n * Check if value is a properly formatted Mac Address.\n * @param {String | Ref<String>} [separator]\n * @returns {function(*): boolean}\n */\n\nfunction macAddress () {\n  var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ':';\n  return function (value) {\n    separator = unref(separator);\n\n    if (!req(value)) {\n      return true;\n    }\n\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    var parts = typeof separator === 'string' && separator !== '' ? value.split(separator) : value.length === 12 || value.length === 16 ? value.match(/.{2}/g) : null;\n    return parts !== null && (parts.length === 6 || parts.length === 8) && parts.every(hexValid);\n  };\n}\n\nvar hexValid = function hexValid(hex) {\n  return hex.toLowerCase().match(/^[0-9a-f]{2}$/);\n};\n\n/**\n * Validate if value is a valid Mac Address string.\n * @returns {NormalizedValidator}\n */\n\nfunction macAddress$1 (separator) {\n  return {\n    $validator: macAddress(separator),\n    $message: 'The value is not a valid MAC Address',\n    $params: {\n      type: 'macAddress'\n    }\n  };\n}\n\n/**\n * Check if provided value has a maximum length\n * @param {Number | Ref<Number>} length\n * @returns {function(Array|Object|String): boolean}\n */\n\nfunction maxLength (length) {\n  return function (value) {\n    return !req(value) || len(value) <= unref(length);\n  };\n}\n\n/**\n * Validate the max length of a string.\n * @param {Number} max\n * @return {NormalizedValidator}\n */\n\nfunction maxLength$1 (max) {\n  return {\n    $validator: maxLength(max),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The maximum length allowed is \".concat($params.max);\n    },\n    $params: {\n      max: max,\n      type: 'maxLength'\n    }\n  };\n}\n\n/**\n * Check if value is above a threshold.\n * @param {Number | Ref<Number>} length\n * @returns {function(Array|Object|String): boolean}\n */\n\nfunction minLength (length) {\n  return function (value) {\n    return !req(value) || len(value) >= unref(length);\n  };\n}\n\n/**\n * Check if value is above a threshold.\n * @param {Number | Ref<Number>} min\n * @returns {NormalizedValidator}\n */\n\nfunction minLength$1 (min) {\n  return {\n    $validator: minLength(min),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"This field should be at least \".concat($params.min, \" long\");\n    },\n    $params: {\n      min: min,\n      type: 'minLength'\n    }\n  };\n}\n\n/**\n * Validates if a value is empty.\n * @param {String | Array | Date | Object} value\n * @returns {boolean}\n */\n\nfunction required (value) {\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n\n  return req(value);\n}\n\n/**\n * Check if a value is empty or not.\n * @type {NormalizedValidator}\n */\n\nvar required$1 = {\n  $validator: required,\n  $message: 'Value is required',\n  $params: {\n    type: 'required'\n  }\n};\n\nvar validate = function validate(prop, val) {\n  return prop ? req(val) : true;\n};\n/**\n * Returns required if the passed property is truthy\n * @param {Boolean | String | function(any): Boolean | Ref<string | boolean>} propOrFunction\n * @return {function(value: *, parentVM: object): Boolean}\n */\n\n\nfunction requiredIf(propOrFunction) {\n  return function (value, parentVM) {\n    if (typeof propOrFunction !== 'function') {\n      return validate(unref(propOrFunction), value);\n    }\n\n    var result = propOrFunction.call(this, value, parentVM);\n    return validate(result, value);\n  };\n}\n\n/**\n * Returns required if the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {NormalizedValidator}\n */\n\nfunction requiredIf$1 (prop) {\n  return {\n    $validator: requiredIf(prop),\n    $message: 'The value is required',\n    $params: {\n      type: 'requiredIf',\n      prop: prop\n    }\n  };\n}\n\nvar validate$1 = function validate(prop, val) {\n  return !prop ? req(val) : true;\n};\n/**\n * Returns required if the passed property is falsy.\n * @param {Boolean | String | function(any): Boolean | Ref<string | boolean>} propOrFunction\n * @return {function(value: *, parentVM: object): Boolean}\n */\n\n\nfunction requiredUnless(propOrFunction) {\n  return function (value, parentVM) {\n    if (typeof propOrFunction !== 'function') {\n      return validate$1(unref(propOrFunction), value);\n    }\n\n    var result = propOrFunction.call(this, value, parentVM);\n    return validate$1(result, value);\n  };\n}\n\n/**\n * Returns required unless the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {NormalizedValidator}\n */\n\nfunction requiredUnless$1 (prop) {\n  return {\n    $validator: requiredUnless(prop),\n    $message: 'The value is required',\n    $params: {\n      type: 'requiredUnless',\n      prop: prop\n    }\n  };\n}\n\n/**\n * Check if two values are identical.\n * @param {*} equalTo\n * @return {function(*=): boolean}\n */\n\nfunction sameAs (equalTo) {\n  return function (value) {\n    return unref(value) === unref(equalTo);\n  };\n}\n\n/**\n * Check if two values are identical\n * @param {*} equalTo\n * @param {String} [otherName]\n * @return {NormalizedValidator}\n */\n\nfunction sameAs$1 (equalTo) {\n  var otherName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'other';\n  return {\n    $validator: sameAs(equalTo),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The value must be equal to the \".concat(otherName, \" value\");\n    },\n    $params: {\n      equalTo: equalTo,\n      otherName: otherName,\n      type: 'sameAs'\n    }\n  };\n}\n\nvar urlRegex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\nvar url = regex(urlRegex);\n\n/**\n * Check if a value is a url\n * @type {NormalizedValidator}\n */\n\nvar url$1 = {\n  $validator: url,\n  $message: 'The value is not a valid URL address',\n  $params: {\n    type: 'url'\n  }\n};\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction syncOr(validators) {\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return validators.reduce(function (valid, fn) {\n      if (unwrapValidatorResponse(valid)) return valid;\n      return unwrapNormalizedValidator(fn).apply(_this, args);\n    }, false);\n  };\n}\n\nfunction asyncOr(validators) {\n  return function () {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return validators.reduce(function (valid, fn) {\n      return _await(valid, function (r) {\n        return unwrapValidatorResponse(r) ? r : unwrapNormalizedValidator(fn).apply(_this2, args);\n      });\n    }, Promise.resolve(false));\n  };\n}\n/**\n * Returns true when one of the provided functions returns true.\n * @param {...(NormalizedValidator|Function)} validators\n * @return {{$validator: function(...[*]=): (boolean | Promise<boolean>), $async: boolean, $watchTargets: any[]}}\n */\n\n\nfunction or() {\n  for (var _len3 = arguments.length, validators = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    validators[_key3] = arguments[_key3];\n  }\n\n  var $async = validators.some(function (v) {\n    return v.$async;\n  });\n  var $watchTargets = validators.reduce(function (all, v) {\n    if (!v.$watchTargets) return all;\n    return all.concat(v.$watchTargets);\n  }, []);\n\n  var $validator = function $validator() {\n    return false;\n  };\n\n  if (validators.length) $validator = $async ? asyncOr(validators) : syncOr(validators);\n  return {\n    $async: $async,\n    $validator: $validator,\n    $watchTargets: $watchTargets\n  };\n}\n\n/**\n * Returns true when one of the provided functions returns true.\n * @param {...(NormalizedValidator|Function)} validators\n * @return {NormalizedValidator}\n */\n\nfunction or$1 () {\n  return withParams({\n    type: 'or'\n  }, withMessage('The value does not match any of the provided validators', or.apply(void 0, arguments)));\n}\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n/**\n *\n * @param validators\n * @return {function(...[*]=): Promise<boolean>}\n */\n\n\nfunction syncAnd(validators) {\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return validators.reduce(function (valid, fn) {\n      if (!unwrapValidatorResponse(valid)) return valid;\n      return unwrapNormalizedValidator(fn).apply(_this, args);\n    }, true);\n  };\n}\n\nfunction asyncAnd(validators) {\n  return function () {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return validators.reduce(function (valid, fn) {\n      return _await$1(valid, function (r) {\n        return unwrapValidatorResponse(r) ? unwrapNormalizedValidator(fn).apply(_this2, args) : r;\n      });\n    }, Promise.resolve(true));\n  };\n}\n/**\n * Returns true when all validators are truthy\n * @param {...(NormalizedValidator | Function)} validators\n * @return {{$validator: function(...[*]=): (boolean | Promise<boolean>), $async: boolean, $watchTargets: any[]}}\n */\n\n\nfunction and() {\n  for (var _len3 = arguments.length, validators = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    validators[_key3] = arguments[_key3];\n  }\n\n  var $async = validators.some(function (v) {\n    return v.$async;\n  });\n  var $watchTargets = validators.reduce(function (all, v) {\n    if (!v.$watchTargets) return all;\n    return all.concat(v.$watchTargets);\n  }, []);\n\n  var $validator = function $validator() {\n    return false;\n  };\n\n  if (validators.length) $validator = $async ? asyncAnd(validators) : syncAnd(validators);\n  return {\n    $async: $async,\n    $validator: $validator,\n    $watchTargets: $watchTargets\n  };\n}\n\n/**\n * Validate if all validators match.\n * @param {...*} validators\n * @returns {NormalizedValidator}\n */\n\nfunction and$1 () {\n  return withParams({\n    type: 'and'\n  }, withMessage('The value does not match all of the provided validators', and.apply(void 0, arguments)));\n}\n\n/**\n * Swaps the result of a value\n * @param {NormalizedValidator|Function} validator\n * @returns {function(*=, *=): boolean}\n */\n\nfunction not (validator) {\n  return function (value, vm) {\n    if (!req(value)) return true;\n    var response = unwrapNormalizedValidator(validator).call(this, value, vm);\n    if (!isPromise(response)) return !unwrapValidatorResponse(response);\n    return response.then(function (r) {\n      return !unwrapValidatorResponse(r);\n    });\n  };\n}\n\n/**\n * Swaps the result of a value\n * @param {NormalizedValidator|Function} validator\n * @returns {NormalizedValidator}\n */\n\nfunction not$1 (validator) {\n  return {\n    $validator: not(validator),\n    $message: \"The value does not match the provided validator\",\n    $params: {\n      type: 'not'\n    }\n  };\n}\n\n/**\n * Check if a value is above a threshold.\n * @param {String | Number | Ref<Number> | Ref<String>} min\n * @returns {function(*=): boolean}\n */\n\nfunction minValue (min) {\n  return function (value) {\n    return !req(value) || (!/\\s/.test(value) || value instanceof Date) && +value >= +unref(min);\n  };\n}\n\n/**\n * Check if a value is above a threshold.\n * @param {String | Number | Ref<Number> | Ref<String>} min\n * @returns {NormalizedValidator}\n */\n\nfunction minValue$1 (min) {\n  return {\n    $validator: minValue(min),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The minimum value allowed is \".concat($params.min);\n    },\n    $params: {\n      min: min,\n      type: 'minValue'\n    }\n  };\n}\n\n/**\n * Check if value is below a threshold.\n * @param {Number | Ref<Number> | Ref<String>} max\n * @returns {function(*=): boolean}\n */\n\nfunction maxValue (max) {\n  return function (value) {\n    return !req(value) || (!/\\s/.test(value) || value instanceof Date) && +value <= +unref(max);\n  };\n}\n\n/**\n * Check if value is below a threshold.\n * @param {Number | Ref<Number> | Ref<String>} max\n * @return {NormalizedValidator}\n */\n\nvar maxValue$1 = (function (max) {\n  return {\n    $validator: maxValue(max),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The maximum value is \".concat($params.max);\n    },\n    $params: {\n      max: max,\n      type: 'maxValue'\n    }\n  };\n});\n\n// ^-[0-9]+$ - only for negative integer (minus sign without at least 1 digit is not a number)\n\nvar integer = regex(/(^[0-9]*$)|(^-[0-9]+$)/);\n\n/**\n * Validate if value is integer.\n * @type {NormalizedValidator}\n */\n\nvar integer$1 = {\n  $validator: integer,\n  $message: 'Value is not an integer',\n  $params: {\n    type: 'integer'\n  }\n};\n\nvar decimal = regex(/^[-]?\\d*(\\.\\d+)?$/);\n\n/**\n * Validate if value is decimal number.\n * @type {NormalizedValidator}\n */\n\nvar decimal$1 = {\n  $validator: decimal,\n  $message: 'Value must be decimal',\n  $params: {\n    type: 'decimal'\n  }\n};\n\nexport { alpha$1 as alpha, alphaNum$1 as alphaNum, and$1 as and, between$1 as between, decimal$1 as decimal, email$1 as email, common as helpers, integer$1 as integer, ipAddress$1 as ipAddress, macAddress$1 as macAddress, maxLength$1 as maxLength, maxValue$1 as maxValue, minLength$1 as minLength, minValue$1 as minValue, not$1 as not, numeric$1 as numeric, or$1 as or, required$1 as required, requiredIf$1 as requiredIf, requiredUnless$1 as requiredUnless, sameAs$1 as sameAs, url$1 as url };\n","<template>\n  <ar-highlighted-text class=\"mt-12\" :text=\"'Get in touch'\" />\n  <form @submit=\"sendInfo\" class=\"pt-12 grid grid-cols-12 mb-16\">\n    <div class=\"col-span-3 hidden lg:block text-purplish-grey\">\n      <label for=\"asunto\" class=\"mb-6 inline-block mt-4 py-1\"\n        >Address: Lorem ipsum dolor</label\n      >\n      <label for=\"email\" class=\"mb-8 inline-block py-1\"\n        >Correo: yourmail@gmail.com</label\n      >\n      <label for=\"phone\" class=\"mb-10 inline-block py-1\"\n        >Phone: +57 345 7953 32453</label\n      >\n      <label for=\"message\" class=\"mb-4 inline-block py-1\"\n        >Message: Lorem ipsum dolor, voluptatem tempora.</label\n      >\n    </div>\n    <div class=\"col-span-12 lg:col-span-9\">\n      <input\n        class=\"w-full bg-gray-100 py-3 px-4 mb-4 border border-transparent\"\n        :class=\"v$.asunto.$error ? '!border-red-500 border' : null\"\n        type=\"text\"\n        v-model=\"state.asunto\"\n        name=\"asunto\"\n        placeholder=\"Asunto\"\n        id=\"asunto\"\n      />\n      <div class=\"error\" v-if=\"v$.asunto.$error\">\n        {{ v$.asunto.$errors[0].$message }}\n      </div>\n      <input\n        class=\"w-full bg-gray-100 py-3 px-4 mb-4 border border-transparent\"\n        :class=\"v$.email.$error ? '!border-red-500 border' : null\"\n        type=\"text\"\n        v-model=\"state.email\"\n        name=\"email\"\n        placeholder=\"Correo\"\n        id=\"email\"\n      />\n      <div class=\"error\" v-if=\"v$.email.$error\">\n        {{ v$.email.$errors[0].$message }}\n      </div>\n      <input\n        class=\"w-full bg-gray-100 py-3 px-4 mb-4 border border-transparent\"\n        type=\"text\"\n        v-model=\"state.phone\"\n        name=\"phone\"\n        placeholder=\"Teléfono\"\n        id=\"phone\"\n      />\n      <textarea\n        class=\"h-52 bg-gray-100 p-4 w-full border border-transparent\"\n        :class=\"v$.message.$error ? '!border-red-500 border' : null\"\n        placeholder=\"Mensaje\"\n        v-model=\"state.message\"\n        id=\"message\"\n      />\n      <div class=\"error pt-2\" v-if=\"v$.message.$error\">\n        {{ v$.message.$errors[0].$message }}\n      </div>\n      <div class=\"mt-8\">\n        <input type=\"checkbox\" v-model=\"v$.termsAccepted.$model\" /><span\n          class=\"ml-4\"\n          >Términos y condiciones</span\n        >\n      </div>\n      <div class=\"error pt-2\" v-if=\"v$.termsAccepted.$error\">\n        This field is required\n      </div>\n      <ar-button class=\"mt-10\" type=\"submit\" :label=\"'Send'\" :color=\"'dark'\" />\n    </div>\n  </form>\n</template>\n\n<script setup>\nimport { computed, reactive } from \"vue\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { required, email } from \"@vuelidate/validators\";\nimport ArButton from \"./ar-button.vue\";\nimport arHighlightedText from \"./ar-highlighted-text.vue\";\n\nconst state = reactive({\n  asunto: \"\",\n  email: \"\",\n  phone: \"\",\n  message: \"\",\n  termsAccepted: false,\n});\nconst rules = computed(() => {\n  return {\n    asunto: { required },\n    email: { required, email },\n    message: { required },\n    termsAccepted: { accepted: (val) => val === true },\n  };\n});\n\nconst v$ = useVuelidate(rules, state);\n\nconst sendInfo = (e) => {\n  e.preventDefault();\n  v$.value.$validate().then((resp) => {\n    if (resp) {\n      alert(JSON.stringify(state, null, 3));\n    }\n  });\n};\n</script>\n\n<style scoped>\n.error {\n  @apply text-xs text-red-700 relative -top-3;\n}\n</style>\n","import script from \"./ar-contact-form.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ar-contact-form.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ar-contact-form.vue?vue&type=style&index=0&id=33c0052a&scoped=true&lang=css\"\nscript.__scopeId = \"data-v-33c0052a\"\n\nexport default script","import script from \"./Contact.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Contact.vue?vue&type=script&setup=true&lang=js\"\n\nexport default script","<template>\n  <div class=\"w-full relative\">\n    <img\n      class=\"object-cover h-[445px] w-full object-left\"\n      src=\"../assets/images/header-bg-2.jpg\"\n      alt=\"header\"\n    />\n    <h1 class=\"absolute bottom-1/4 left-40 text-[82px] font-bold text-white\">\n      {{ currentRoute.name }} <span class=\"text-pear\">.</span>\n    </h1>\n  </div>\n</template>\n\n<script setup>\nimport { useRouter } from \"vue-router\";\n\nconst router = useRouter();\nconst { currentRoute } = router;\n</script>\n\n<style></style>\n","import script from \"./ar-page-header.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ar-page-header.vue?vue&type=script&setup=true&lang=js\"\n\nexport default script"],"sourceRoot":""}